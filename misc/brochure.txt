Student

Florian Bruhin

Examiner

Prof. Stefan F. Keller

Subject Area

Software

Florian
Bruhin

qutebrowser made extensible
Introduction: The qutebrowser project is a web browser, comparable to Google
Chrome or Mozilla Firefox, which is focused on keyboard usage and having a
minimal user interface. It is aimed at power-users who value customizability and
efficiency, but are willing to accept a rather steep learning curve compared to
"traditional" web browsers.
Since qutebrowser uses the Python programming language in conjunction with the Qt
library for graphical user interfaces, it is standing on the shoulders of giants: It does
not implement complex tasks such as downloading and executing
HTML/CSS/JavaScript code itself. Instead, it relies on the QtWebEngine project to do
so, which is largely based on the same code as Chrome.

Screenshot of qutebrowser displaying the web page history by
completing a search command (":open hsr")

Work on qutebrowser started in 2013. Since then, it has gained a big community of
thousands of users and dozens of contributors.
Objective: In contrast to Chrome and Firefox, qutebrowser did not support extending
its functionality via extensions. Over its lifetime, various features have been added to
its core by its maintainer and contributors. However, this caused the core to grow
substantially, becoming increasingly complex over time.
Many users of qutebrowser are power-users and thus have specific feature requests
and workflows. It should be possible for those users to extend qutebrowser in an
easy way in order to keep the core small and simple.
The goal of this project was to make qutebrowser extensible by introducing a clearly
defined API which can be used to develop extensions.

Software technologies used in qutebrowser

Procedure / Result: In order to follow best practices in the software development
world, tools for checking data types were evaluated. The "mypy" tool is now run
regularly over the code which resulted in various lingering defects being found in
qutebrowser itself and in related projects. Important parts of qutebrowser were
annotated with type information in order to prevent such issues in the future, also
serving as additional developer documentation.
Before attempting to expose an interface for extensions from qutebrowser, various
problematic areas in its codebase had to be cleaned up due to "technical debt"
accumulating in the past. Subsequently, functionality suitable for moving out of the
core into extensions was identified. Based on the selected areas of code, a concept
for an extension API was developed. After implementing said API, large parts of
qutebrowser's functionality could be moved into extensions. The resulting changes
increased code maintainability and simplicity.

Example extension checking whether a website uses the Leaflet
library, which is often used to display OpenStreetMap maps

Studien- und Semesterarbeiten 2019 â–  Informatik

